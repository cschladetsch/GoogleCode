//
// string templates to write .fx files from .fx files
//
// (C) 2009 Christian Schladetsch
// (C) 2009 Blue Lion Software
// Permission to use for any purpose is given, as long as this copyright
// information is included in any derived works.

group Shader;

file(contents) ::=
<<
// Auto-generated by [[PROGRAM]] 
// at [[DATE]]

<contents; separator="\n\n">

//EOF

>>

structure(name, fields) ::=
<<
struct <name>
{
	<fields; separator="\n">
};
>>

texture(tex_name) ::=
<<
texture <tex_name>;
>>

sampler(name, fields) ::=
<<
sampler2D <name> = sampler_state
{
	<fields; separator="\n">
};
>>

sampler_field_texture(tex_name) ::=
<<
Texture = \<<tex_name>\>;
>>

sampler_field_assign(ident, value) ::=
<<
<ident> = <value>;
>>

uniform(type, name, subscript, semantic) ::=
<<
<type> <name><subscript><semantic>;
>>

subscript(index) ::=
<<
[<index>]
>>

semantic(name) ::=
<<
 : <name>
>>

user_semantic(name) ::=
<<
 : <name>
>>

function(ret, name, args, semantic, body) ::=
<<
<ret> <name>(
	<args; separator=",\n">) <semantic>
<body>
>>

block(statements) ::= 
<<
{
	<statements; separator="\n">
}
>>

formal_arg(type, name, dir, subscript, semantic) ::=
<<
<if(dir)><dir> <endif><type> <name><subscript><semantic>
>>

statement(expr) ::=
<<
<expr>;
>>

return(expr) ::=
<<
return <expr>
>>

assign(left, right) ::=
<<
<left> = <right>
>>

function_call(name, args) ::=
<<
<name>(<args>)
>>

arg_list(args) ::=
<<
<args; separator=", ">
>>

ident(name) ::= 
<<
<name>
>>

literal(val) ::= 
<<
<val>
>>

bin_op(op, left, right) ::=
<<
<left> <op> <right>
>>

field_access(object, field) ::=
<<
<object>.<field>
>>

local_var(type, name, init) ::=
<<
<type> <name><if(init)> = <init><endif>
>>

cast(type, expr) ::=
<<
(<type>)<expr>
>>
//EOF
